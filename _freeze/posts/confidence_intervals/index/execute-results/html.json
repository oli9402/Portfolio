{
  "hash": "e8046dea805c9149b11a860643c2082b",
  "result": {
    "markdown": "---\ntitle: \"Variable selection\"\nauthor: \"Oliver Zingg\"\ndate: \"09.06.2023\"\n---\n\n\n\n\n-   Author: Oliver Zingg\n-   Full credit goes to: https://www.kaggle.com/code/hamelg/intro-to-r-part-23-confidence-intervals/notebook\n-   My contribution is only adding comments to learn from this code as much as possible\n\n## Generating data\n\nThe following example simulates the process of finding the **mean age value** of a population of voters.\n\n-   First we generate a population with their age values\n    -   1 Million values a generated from an exponential distribution and 1.5 Million values from a poisson distribution\n    -   18 is added to make sure that no age value is below 18 years old.\n-   For numbers higher than 100 the modulo (%%) is taken and 18 is added to make sure we don't end up with too large numbers.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(12)\n\n# Generate a population\npopulation_ages <- c(rexp(1000000,0.015)+18,   \n                    rpois(500000,20)+18,\n                    rpois(500000,32.5)+18,\n                    rpois(500000,45)+18)\n\npopulation_ages <- ifelse(population_ages<100, \n                          population_ages, population_ages%%100+18)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntrue_mean <- mean(population_ages)   # Check the population mean\n\ntrue_mean\n```\n:::\n\n\n## Drawing different sample from the population and calculating the mean\n\n-   The central limit theorem states that the distribution of the mean values are normally distributed no matter what the distribution is of the population.\n\n\n::: {.cell}\n\n:::\n\n\n### Let's visualize the distribution of mean values. A skewness of 0 would be a normal distribution.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -0.2609927\n```\n:::\n:::\n\n\nThe skewness is -0.1349 indicating a left sided skewdness\n\n## Confidence Intervals for the mean values\n\n-   First the sample size is determined then an empty vector is created that will store the boundaries of all confidence intervals\n-   The for loop is set to 25, meaning we draw a sample of size 1000 25 times.\n-   With qnorm we can get the z value that is used to calculate the boundaries of the confidence intervals\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(12)\nsample_size <- 1000\n\nintervals <- c()  # Create and store 25 intervals\n \nfor (sample in 1:25){\nsample_ages <- sample(population_ages, size=sample_size)  # Take a sample of 1000 ages\n\nsample_mean <- mean(sample_ages)  # Get the sample mean\n\nz_critical <- qnorm(0.975)        # Get the z-critical value*\n\npop_stdev <- sd(population_ages)  # Get the population standard deviation\n\nmargin_of_error <- z_critical * (pop_stdev / sqrt(sample_size)) # Calculate margin of error\n\nconfidence_interval  <- c(sample_mean - margin_of_error,  # Calculate the the interval\n                          sample_mean + margin_of_error)  \n\nintervals <- c(intervals, confidence_interval)    \n}\n\ninterval_df <- data.frame(t(matrix(intervals,2,25)))  # Store intervals as data frame\n```\n:::\n\n\n## Plotting the 25 confidence intervals\n\nThe red line shows the true mean. We see the first confidence interval not including the true mean. (1/25 = 0.04)\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nâ„¹ Please use `linewidth` instead.\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n### Summary\n\n-   Simulating confidence intervall shows that some will not include the true value.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}