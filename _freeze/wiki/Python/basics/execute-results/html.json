{
  "hash": "2ff425321c619ea8dc367b492f0b3a22",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: 'Learning the Basics'\ncode-fold: false\n---\n\n## Namespace\n\n- *built-in*: all objects provided by python\n- *global*: programmer defined objects across whole script\n- *local*: programmer defined objects in function blocks\n\nObject name must only be unique **within a given namespace**:\n\n::: {#e83b5f75 .cell execution_count=1}\n``` {.python .cell-code}\ndef my_function(x):\n  return x+10\n\ndef test_function(x):\n  def my_function(y):  # my_function: this is possible since different namespace \n    return y + 20\n  x = my_function(2)\n  return x \n\ntest_function()(y=10)\n```\n:::\n\n\nInside a function you can access a global object via the keyword `global`. You can also increase a global var inside a function for example. But this should be avoided global access.\n\nThe keyword `nonlocal` will access a variable in the next higher namespace. \n\n## Scope \nScope of an object refers to the code section from which an object is accessible.\n***\n\n## Functions\n\nFunctions can only return one reference to a storage location. So returning multiple references must be saved in a list:\n\n::: {#64bf400e .cell execution_count=2}\n``` {.python .cell-code}\ndef function(a,b):\n  return list(a,b)\n\n```\n:::\n\n\nLearning material for python functions (e.g., str.split()): [here](https://github.com/TheAlgorithms/Python/blob/master/strings/split.py) \n\n\n### Function chaining:\n\n::: {#9adcd65a .cell execution_count=3}\n``` {.python .cell-code}\nfunction_1(function_2(a)) = function_2(a).function_1()\n```\n:::\n\n\n### Function Arguments\n\n::: {#fdd0c383 .cell execution_count=4}\n``` {.python .cell-code}\na,b,c = 3,4,5\n\na,b,c = 3,4,5,6 ## Error\n\na,b,*c = 3,4,5,6 # Works: assign all remaining var to c\n```\n:::\n\n\n`*` packs elements into a list. Use `*` again to unpack:\n\n::: {#32212568 .cell execution_count=5}\n``` {.python .cell-code}\nprint(a,b,*c)\n```\n:::\n\n\nThis can be done in function parameter aswell: \n\n::: {#3e9606b5 .cell execution_count=6}\n``` {.python .cell-code}\ndic = {'a':1, 'b':3}\ndef my_f(a,b):\n    return a+b\n\nmy_f(**dic) #Returns  4\n```\n:::\n\n\n`**` unpacks a dictionary. can only be used as parameter input?\n\nUsing `*args` in as parameter must be then accessed with a for loop, since  it is provided to the function as tupple. \n\n::: {#1165380b .cell execution_count=7}\n``` {.python .cell-code}\n# print first n letters of words\n\ndef strcut(*str, n):\n    for i in str:\n        print(i[:n])\n# or \n\ndef strcut(*str,n):\n    print('\\n'.join(i[:n] for i in str))\n```\n:::\n\n\n### Else after Function\n\nIf for example we search a list for a flag item we can use else for the case that the flag item is not in the list.\n\n::: {#b6c03357 .cell execution_count=8}\n``` {.python .cell-code}\nfor i in mylist:\n    if i == theflag:\n        break\n    process(i)\nelse:\n    raise ValueError(\"List argument missing terminal flag.\")\n```\n:::\n\n\n### Recursion\n\nSimple recursion of factorial()\n\n::: {#5f9ce5dd .cell execution_count=9}\n``` {.python .cell-code}\ndef fac(n):\n  if n == 1:\n    return 1\n  else: \n    return n * fac(n-1)\n```\n:::\n\n\n***\n\n## List\n\nAppend new element to list \n\n::: {#177c8b85 .cell execution_count=10}\n``` {.python .cell-code}\nli = [1,2,2,3]\n\nli.append(4) \nli += [4]\n\n[2] + [1] ## -> [2,1]\n```\n:::\n\n\n***\n\n## String formating\nThere are multiple ways here are two: \n\n### Formatted String Literals\nStart with an f or F. Allows including variable names with {}. \n\nExample: right align and use 5 spaces including var1\n\n::: {#3db1a6ad .cell execution_count=11}\n``` {.python .cell-code}\nprint(f\"{var1:>5}\")\n```\n:::\n\n\nExample: self documentation and debugging: returns var name and what is stored\n`var1= -> var1=7`\n\n::: {#d0b54112 .cell execution_count=12}\n``` {.python .cell-code}\nprint(f\"{var1=}\")\n```\n:::\n\n\n### Format() Method\nString objects provides methods/functions and apply it to string object\n\nMore flexible way to string literals: {} only placeholders, must be specified in format()\n\n::: {#1dc24468 .cell execution_count=13}\n``` {.python .cell-code}\nvar1 ='world'\nvar2 = 7\n\nprint(\"hello {} {}\".format(var1, var2))\nprint(\"hello {1} {0}\".format(var2, var1))\n\ndict = {'num': 7, 'txt': 'world'}\nprint(\"hello {0[txt]} {0[num]}\".format(dict))\n\n```\n:::\n\n\n***\n\n## File Handling\n\n`open(file_name, mode)` creates file object in python. It opens a pipe stream of the file that must be closed again `close()`.\n\nPython provides a way to handle close with the function `with`. As soon as the block is left, the file is closed. \n\n::: {#9acea5bd .cell execution_count=14}\n``` {.python .cell-code}\nwith open(file_name, mode) as file_object: \n  ...\n  ...\n  ...\n```\n:::\n\n\n### Read\n\n## Object Oriented Programming \n\n\nVariables are references to objects and objects belong to a class.\n\n`x = 99` is a references to storage location of a object of class int\n\n### Class\nBlueprint for what an object should look like and how it should function.\nHas several elements. Functions are called methods (inside a class)\n\n- header: indicates beginning of class\n- __init__(): constructor (build) for objects\n- variables: Class and object\n- self: reference to the object that is created\n\n::: {#91d42c8a .cell execution_count=15}\n``` {.python .cell-code}\nclass PackageName: \n  \"\"\"\n  Description\n  \"\"\"\n  def __init__(self, name: str, quality: str) -> none:\n      self.name = name\n      self.quality = quality\n# create an object from this class\n\nx: PackageName = PackageName(name = 'ggplot', quality = 'high') #self becomes x\n```\n:::\n\n\n{{< video https://www.youtube.com/watch?v=rLyYb7BFgQI&t=323s&ab_channel=Indently >}}\n\n\n\n### Dunder Methods \n\nHow should objects of a class behave for certain operations\n\n::: {#12782b93 .cell execution_count=16}\n``` {.python .cell-code}\nclass A: \n  ...\n  \n  def __add__(self,other):\n    return f'{self.name} + {other.name}'\n  \n\n\nx = A()\ny = A()\n\nprint(x + y)\n```\n:::\n\n\n### Subclass\n\nInheritance creates a hierarchy of classes\n\n- Animal -> Bird and Cow\n\ntest with `issubclass(Bird, Animal)`. Child classes get all properties from parent class. \n\n",
    "supporting": [
      "basics_files"
    ],
    "filters": [],
    "includes": {}
  }
}