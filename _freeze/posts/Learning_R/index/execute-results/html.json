{
  "hash": "af5f42e5d8a3fe571d9f0db28534b8f1",
  "result": {
    "markdown": "---\ntitle: \"Learning R with R for Data Science\"\nauthor: \"Oliver Zingg\"\ndate: \"09.10.2023\"\nimage: \"bird.jpg\"\n---\n\n\n\nDieses Projekt dient dazu mein Wissen über die Programmiersprache R zu vertiefen. Dazu verwende ich [R for Data Science](https://r4ds.hadley.nz/intro)\n\n\n# Packete installieren und laden \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\n#  c(\"arrow\", \"babynames\", \"curl\", \"duckdb\", \"gapminder\", \n#    \"ggrepel\", \"ggridges\", \"ggthemes\", \"hexbin\", \"janitor\", \"Lahman\", \n#    \"leaflet\", \"maps\", \"nycflights13\", \"openxlsx\", \"palmerpenguins\", \n#    \"repurrrsive\", \"tidymodels\", \"writexl\", \"tidyverse\")\n#  )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse) #ggplot2\nlibrary(palmerpenguins) #data\nlibrary(ggthemes) #color bild colors \n```\n:::\n\n\n\n# GGplot2\n\nArgumente: \n\n* data = was für einen Datensatz wird verwendet?\n* mapping = wie sollten Daten visuell dargestellt werden, mit aes() Funktion\n* + müssen immer am Ende der Linie und nicht zu Beginn platziert werden!\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins <- palmerpenguins::penguins\n\nggplot(\n  data = penguins,\n  mapping = aes(x = flipper_length_mm, y = body_mass_g, color = species)\n) + geom_point() + geom_smooth(method =\"lm\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\nDa nun *color = species* in ggplot() definiert worden ist, werden weiter Funktionen wie geom_point() auf die unterschiedlichen species angewendet. Jedoch wollen wir eine Regressionslinie die mithilfe aller Pünkte (Species) kreiert wird aber die Farben für unterschiedliche Species beibehaltet werden soll, dann muss folgender Code verwendet werden: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  data = penguins,\n  mapping = aes(x = flipper_length_mm, y = body_mass_g)\n) +\n  geom_point(mapping = aes(color = species, shape = species)) + \n  geom_smooth(method = \"lm\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  data = penguins,\n  mapping = aes(x = flipper_length_mm, y = body_mass_g)\n) +\n  geom_point(aes(color = species, shape = species)) +\n  geom_smooth(method = \"lm\") +\n  labs(\n    title = \"Body mass and flipper length\",\n    subtitle = \"Dimensions for Adelie, Chinstrap, and Gentoo Penguins\",\n    x = \"Flipper length (mm)\", y = \"Body mass (g)\",\n    color = \"Species\", shape = \"Species\",\n    caption = \"Data came from palmerpenguins package\"\n  ) +\n  scale_color_colorblind()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(aes(color = species, shape = island))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#OR\nggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(aes(color = species, shape = species)) +\n  facet_wrap(~island)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-2.png){width=672}\n:::\n\n```{.r .cell-code}\n#ggsave(filename = \"penguin-plot.png\") <- for saving\n```\n:::\n\n\n# Data transformation\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights <- nycflights13::flights\nglimpse(flights)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 336,776\nColumns: 19\n$ year           <int> 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2…\n$ month          <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ day            <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ dep_time       <int> 517, 533, 542, 544, 554, 554, 555, 557, 557, 558, 558, …\n$ sched_dep_time <int> 515, 529, 540, 545, 600, 558, 600, 600, 600, 600, 600, …\n$ dep_delay      <dbl> 2, 4, 2, -1, -6, -4, -5, -3, -3, -2, -2, -2, -2, -2, -1…\n$ arr_time       <int> 830, 850, 923, 1004, 812, 740, 913, 709, 838, 753, 849,…\n$ sched_arr_time <int> 819, 830, 850, 1022, 837, 728, 854, 723, 846, 745, 851,…\n$ arr_delay      <dbl> 11, 20, 33, -18, -25, 12, 19, -14, -8, 8, -2, -3, 7, -1…\n$ carrier        <chr> \"UA\", \"UA\", \"AA\", \"B6\", \"DL\", \"UA\", \"B6\", \"EV\", \"B6\", \"…\n$ flight         <int> 1545, 1714, 1141, 725, 461, 1696, 507, 5708, 79, 301, 4…\n$ tailnum        <chr> \"N14228\", \"N24211\", \"N619AA\", \"N804JB\", \"N668DN\", \"N394…\n$ origin         <chr> \"EWR\", \"LGA\", \"JFK\", \"JFK\", \"LGA\", \"EWR\", \"EWR\", \"LGA\",…\n$ dest           <chr> \"IAH\", \"IAH\", \"MIA\", \"BQN\", \"ATL\", \"ORD\", \"FLL\", \"IAD\",…\n$ air_time       <dbl> 227, 227, 160, 183, 116, 150, 158, 53, 140, 138, 149, 1…\n$ distance       <dbl> 1400, 1416, 1089, 1576, 762, 719, 1065, 229, 944, 733, …\n$ hour           <dbl> 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6…\n$ minute         <dbl> 15, 29, 40, 45, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0…\n$ time_hour      <dttm> 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2013-01-01 0…\n```\n:::\n:::\n\n\nJetzt wird mit dem Packet **dplyr** - welches mit tidyverse geladen wird - die relevanten Daten rausgefiltert.\n\nDplyrs Verben (\"Funktionen\")  können auf Reihen, Spalten, Gruppen und Tabellen operien.\n\n## Dplyrs Funktionen\n\n* **filter()** = filtert Reihen ohne ihre Reihenfolge zu ändern\n* **arrange()** = verändert Reihenfolge ohne zu filtern\n\nDiese Funktionen können mit logischen Statments als Argumente umgehen. %in% ist eine abgekürzte Schreibweise für | und ==.\n\n::: {.cell}\n\n```{.r .cell-code}\n# A shorter way to select flights that departed in January or February\nflights |> \n  filter(month %in% c(1, 2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 51,955 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 51,945 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  arrange(year, month, day, dep_time)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n:::\n:::\n\n\nMit der Funktion distinct() kann man Reihne, die mehrfach wiederholt werden rausfiltern\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  distinct()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n:::\n:::\n\n\nAlle einzigartige Kombination von Abflug- und Ankunftsort lassen sich folgenermassen herausfiltern:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  distinct(origin,dest)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 224 × 2\n   origin dest \n   <chr>  <chr>\n 1 EWR    IAH  \n 2 LGA    IAH  \n 3 JFK    MIA  \n 4 JFK    BQN  \n 5 LGA    ATL  \n 6 EWR    ORD  \n 7 EWR    FLL  \n 8 LGA    IAD  \n 9 JFK    MCO  \n10 LGA    ORD  \n# ℹ 214 more rows\n```\n:::\n:::\n\nMit count() kann man die Anzahl Flüge dieser Kombination kalkulieren\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  count(origin, dest, sort = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 224 × 3\n   origin dest      n\n   <chr>  <chr> <int>\n 1 JFK    LAX   11262\n 2 LGA    ATL   10263\n 3 LGA    ORD    8857\n 4 JFK    SFO    8204\n 5 LGA    CLT    6168\n 6 EWR    ORD    6100\n 7 JFK    BOS    5898\n 8 LGA    MIA    5781\n 9 JFK    MCO    5464\n10 EWR    BOS    5327\n# ℹ 214 more rows\n```\n:::\n:::\n\nWenn man mehrere Spalten selektionieren will wie z.B. \"x1\", \"x2\" usw.:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# dataset |>\n#  select(num_range(\"x\", 1:3)) selektioniert x1, x2 and x3.\n```\n:::\n\n\nMit ==select(new variable name = variable)== kann man die selektionierten Variablen neu benennen. Falls man alle anderen Variablen behalten will, kann man auch ==rename()== verwenden.\n\n## Excercise\n\n### Sort flights to find the flights with longest departure delays. Find the flights that left earliest in the morning.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  arrange(desc(dep_delay))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     9      641            900      1301     1242           1530\n 2  2013     6    15     1432           1935      1137     1607           2120\n 3  2013     1    10     1121           1635      1126     1239           1810\n 4  2013     9    20     1139           1845      1014     1457           2210\n 5  2013     7    22      845           1600      1005     1044           1815\n 6  2013     4    10     1100           1900       960     1342           2211\n 7  2013     3    17     2321            810       911      135           1020\n 8  2013     6    27      959           1900       899     1236           2226\n 9  2013     7    22     2257            759       898      121           1026\n10  2013    12     5      756           1700       896     1058           2020\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n:::\n\n```{.r .cell-code}\nflights|>\n  arrange(time_hour)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            558        -4      740            728\n 6  2013     1     1      559            559         0      702            706\n 7  2013     1     1      554            600        -6      812            837\n 8  2013     1     1      555            600        -5      913            854\n 9  2013     1     1      557            600        -3      709            723\n10  2013     1     1      557            600        -3      838            846\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n:::\n:::\n\n\n\n### Sort flights to find the fastest flights. (Hint: Try including a math calculation inside of your function.)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  mutate(speed = distance/air_time *60, .before = 1) |>  #.before = 1 adds speed to start of coloumns, we can also use .before = year\n  arrange(desc(speed))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 × 20\n   speed  year month   day dep_time sched_dep_time dep_delay arr_time\n   <dbl> <int> <int> <int>    <int>          <int>     <dbl>    <int>\n 1  703.  2013     5    25     1709           1700         9     1923\n 2  650.  2013     7     2     1558           1513        45     1745\n 3  648   2013     5    13     2040           2025        15     2225\n 4  641.  2013     3    23     1914           1910         4     2045\n 5  591.  2013     1    12     1559           1600        -1     1849\n 6  564   2013    11    17      650            655        -5     1059\n 7  557.  2013     2    21     2355           2358        -3      412\n 8  556.  2013    11    17      759            800        -1     1212\n 9  554.  2013    11    16     2003           1925        38       17\n10  554.  2013    11    16     2349           2359       -10      402\n# ℹ 336,766 more rows\n# ℹ 12 more variables: sched_arr_time <int>, arr_delay <dbl>, carrier <chr>,\n#   flight <int>, tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>,\n#   distance <dbl>, hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n:::\n:::\n\nWenn dem Argument .keep = \"used\" behält man alle Variablen die man in der Funktion mutate() verwendet hat.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  mutate(speed = distance/air_time *60, .keep = \"used\") |>\n  arrange(desc(speed))\n```\n:::\n\n\n### Was there a flight on every day of 2013?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  filter(year == 2013) |>\n  distinct(month,day) |>\n  count()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n      n\n  <int>\n1   365\n```\n:::\n:::\n\n\n### Fast flight to Houston's IAH airport\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  filter(dest == \"IAH\") |> \n  mutate(speed = distance / air_time * 60) |> \n  select(year:day, dep_time, carrier, flight, speed) |> \n  arrange(desc(speed)) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 7,198 × 7\n    year month   day dep_time carrier flight speed\n   <int> <int> <int>    <int> <chr>    <int> <dbl>\n 1  2013     7     9      707 UA         226  522.\n 2  2013     8    27     1850 UA        1128  521.\n 3  2013     8    28      902 UA        1711  519.\n 4  2013     8    28     2122 UA        1022  519.\n 5  2013     6    11     1628 UA        1178  515.\n 6  2013     8    27     1017 UA         333  515.\n 7  2013     8    27     1205 UA        1421  515.\n 8  2013     8    27     1758 UA         302  515.\n 9  2013     9    27      521 UA         252  515.\n10  2013     8    28      625 UA         559  515.\n# ℹ 7,188 more rows\n```\n:::\n:::\n\n\n### Which month has most delays on average?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  group_by(month) |> \n  summarize(\n    delay = round(mean(dep_delay, na.rm = TRUE),2), n_rows = n()\n  ) |>\n  arrange(desc(delay))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 × 3\n   month delay n_rows\n   <int> <dbl>  <int>\n 1     7 21.7   29425\n 2     6 20.8   28243\n 3    12 16.6   28135\n 4     4 13.9   28330\n 5     3 13.2   28834\n 6     5 13.0   28796\n 7     8 12.6   29327\n 8     2 10.8   24951\n 9     1 10.0   27004\n10     9  6.72  27574\n11    10  6.24  28889\n12    11  5.44  27268\n```\n:::\n\n```{.r .cell-code}\n#Alternative:\n\n#flights |> \n#  summarize(\n#    delay = mean(dep_delay, na.rm = TRUE), \n#    n = n(),\n#    .by = month\n#  )\n```\n:::\n\n### Find most delays flight for each destination\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  group_by(dest) |> \n  slice_max(arr_delay, n = 1) |> #if two flights same delay both are kept, with_ties = FALSE if strictly only one row per destination \n  relocate(dest) |>\n  arrange(desc(arr_delay))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 108 × 19\n# Groups:   dest [105]\n   dest   year month   day dep_time sched_dep_time dep_delay arr_time\n   <chr> <int> <int> <int>    <int>          <int>     <dbl>    <int>\n 1 HNL    2013     1     9      641            900      1301     1242\n 2 CMH    2013     6    15     1432           1935      1137     1607\n 3 ORD    2013     1    10     1121           1635      1126     1239\n 4 SFO    2013     9    20     1139           1845      1014     1457\n 5 CVG    2013     7    22      845           1600      1005     1044\n 6 TPA    2013     4    10     1100           1900       960     1342\n 7 MSP    2013     3    17     2321            810       911      135\n 8 ATL    2013     7    22     2257            759       898      121\n 9 MIA    2013    12     5      756           1700       896     1058\n10 LAS    2013     5    19      713           1700       853     1007\n# ℹ 98 more rows\n# ℹ 11 more variables: sched_arr_time <int>, arr_delay <dbl>, carrier <chr>,\n#   flight <int>, tailnum <chr>, origin <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\navg_flight <- flights %>% \n  group_by(month, day) %>% \n  summarize(n = n())\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'month'. You can override using the\n`.groups` argument.\n```\n:::\n\n```{.r .cell-code}\nggplot(data = avg_flight,\n       # By default, the y-axis will have December at the top, so use fct_rev() to reverse it\n       mapping = aes(x = day, y = month, fill = n)) +\n  geom_tile() +\n  # Add viridis colors\nscale_fill_viridis_c(option = \"inferno\") + \n  # Add nice labels\n  labs(x = \"Day\", y = \"Month\",\n       title = \"Flights per day\",\n       subtitle = \"2013\",\n       fill = \"Count\") +\n  # Force all the tiles to have equal widths and heights\n  coord_equal() +\n  # Use a cleaner theme\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}